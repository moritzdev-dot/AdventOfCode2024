import matplotlib.pyplot as plt
import numpy as np
from scipy.spatial import ConvexHull

content = []
with open("input.txt") as file:
    content = file.read().strip().split("\n")

dirs = [
    (1, 0),
    (0, 1),
    (-1, 0),
    (0, -1)
]
visited = {}
polygons: list[tuple[set[tuple[int, int]], str]] = []

def getRegion(x: int, y: int, content, visited):
    fenceNum = 0
    stack = [(x, y)]
    plants = 0
    v = set()
    letter = content[x][y]

    while len(stack) > 0:
        x, y = stack.pop()
        if visited.get((x, y)):
            continue
        plants += 1
        visited[(x, y)] = True
        fenceNum += 4
        for (dx, dy) in dirs:
            if x + dx < 0 or x + dx >= len(content) or y + dy < 0 or y +dy >= len(content[0]):
                continue

            if content[x + dx][y+dy] == letter:
                fenceNum -= 1
                if not visited.get((x + dx, y + dy)):
                    stack.append((x + dx, y + dy))

        v.add((x, y))
        #v.add((x+1, y+1))
        #v.add((x, y+1))
        #v.add((x+1, y))


    if letter == "F":
        print(v)

    polygons.append((v, letter))
    return fenceNum * plants

def getNextFreePos(content, visited):
    for i in range(len(content)):
        for j in range(len(content[0])):
            if not visited.get((i, j)):
                return (i, j)
    return None


freePos = getNextFreePos(content, visited)
sum = 0
while freePos is not None:
    x, y = freePos
    sum += getRegion(x, y, content, visited)
    freePos = getNextFreePos(content, visited)

def tracePoints(start: tuple[int, int], points: set[tuple[int, int]]):
    visited = {}
    curX, curY = start

    corners = 0
    dirX, dirY = 0, 0
    while not visited.get((curX, curY)):
        visited[(curX, curY)] = True
        possibleDirs = set()
        for dx, dy in dirs:
            if (curX + dx, curY + dy) in points and not visited.get((curX + dx, curY + dy)):
                possibleDirs.add((dx, dy))

        if len(possibleDirs) == 0:
            break

        dirX, dirY = possibleDirs.pop()

        while (curX + dirX, curY + dirY) in points:
            visited[(curX, curY)] = True
            curX += dirX
            curY += dirY


        corners += 1
    return corners


sum = 0
for v, letter in polygons:
    toRemove = []
    size = len(v)
    x = list(v)[0][0]
    y = list(v)[0][1]
    for el in v:
        dirsT = [
            (1, 0),
            (0, 1),
            (-1, 0),
            (0, -1),
            (-1, 1),
            (1, 1),
            (-1, -1),
            (1, -1)
        ]
        sum = 0
        for dir in dirsT:
            if (el[0] - dir[0], el[1] - dir[1]) in v:
                sum += 1
        if sum == 8:
            toRemove.append(el)
    for el in toRemove:
        v.remove(el)


    p = tracePoints(list(v)[0], v)
    print(letter, ": ", p)

    if letter == "F":
        plt.scatter([x[0] for x in v], [x[1] for x in v])
        plt.show()
        plt.clf()



