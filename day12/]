import matplotlib.pyplot as plt

content = []
with open("input.txt") as file:
    content = file.read().strip().split("\n")

dirs = [
    (1, 0),
    (0, 1),
    (-1, 0),
    (0, -1)
]
visited = {}
polygons = []

def isEdge(x, y, content):
    dirs = [
        (1, 0),
        (0, 1),
        (-1, 0),
        (0, -1),
        (-1, 1),
        (1, 1),
        (-1, -1),
        (1, -1)
    ]
    sum = 0
    for dx, dy in dirs:
        if x + dx < 0 or x + dx >= len(content) or y + dy < 0 or y +dy >= len(content[0]):
            continue
        if content[x + dx][y+dy] != content[x][y] :
            sum += 1

    if sum == 1:
        return True
    
    return getFenceScore(x, y, content) > 1
        

def getFenceScore(x, y, content):
    letter = content[x][y]
    fenceScore = 0
    fenceDirs = []
    for (dx, dy) in dirs:
        if x + dx < 0 or x + dx >= len(content) or y + dy < 0 or y +dy >= len(content[0]):
            fenceScore += 1
            continue

        if content[x + dx][y+dy] != letter:
            fenceScore += 1

    return fenceScore


def getRegion(x: int, y: int, content, visited):
    fenceNum = 0
    stack = [(x, y)]
    plants = 0
    v = set()
    edges = []
    while len(stack) > 0:
        x, y = stack.pop()
        if visited.get((x, y)):
            continue
        plants += 1
        visited[(x, y)] = True
        letter = content[x][y]
        fenceNum += 4
        for (dx, dy) in dirs:
            if x + dx < 0 or x + dx >= len(content) or y + dy < 0 or y +dy >= len(content[0]):
                continue

            if content[x + dx][y+dy] == letter:
                edges.append(((y, -x), (y+dy, -(x+dx))))
                fenceNum -= 1
                if not visited.get((x + dx, y + dy)):
                    stack.append((x + dx, y + dy))

        v.add((y, -x))
        v.add((y+1, -(x + 1)))
        v.add((y+1, -(x)))
        v.add((y, -(x+1)))



    polygons.append((v, edges))
    return fenceNum * plants

def getNextFreePos(content, visited):
    for i in range(len(content)):
        for j in range(len(content[0])):
            if not visited.get((i, j)):
                return (i, j)
    return None


freePos = getNextFreePos(content, visited)
sum = 0
while freePos is not None:
    x, y = freePos
    sum += getRegion(x, y, content, visited)
    freePos = getNextFreePos(content, visited)

visited = {}
sum = 0
for v, e in polygons:
    print(v)
    plt.scatter(list([x[0] for x in v]), list([x[1] for x in v]))
    plt.show()
    break





